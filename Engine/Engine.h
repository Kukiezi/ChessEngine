#ifndef ENGINE_H
#define ENGINE_H
#include <string>
#include "Game.h"
#include "ReplayGame.h"
#include <filesystem>
#include <QDirIterator>

//!  A class that provides funcionalities for UI to run chess game
/*!
  This class is a public interface for UI engine to use and validate chess game easly.
*/
class Engine
{
std::unique_ptr<Game> game_;
std::unique_ptr<ReplayGame> replayGame_;

public:
    //! Start Game method.
    /*!
      Start new game. Initiate the board, players, gameType.
      \param fenString string.
      \param gameType as GameType enum.
    */
    void startGame(std::string fenString = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR", GameType gameType = GameType::NORMAL);

    //! Start Replay method.
    /*!
      Start new replay game based on given game file. Replays start from starting chess position.
      \param gameFilePath as string.
      \param fenString as string.
    */
    void startReplay(std::string gameFilePath, std::string fenString = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR");

    //! Perform a move from string.
    /*!
      Perform a move, by reading from string. Example string: e2e4.
      \param move as string.
    */
    bool makeMove(std::string move);

    //! Perform a move from row/col pairs.
    /*!
      Perform a move by accepting two pairs of integers.
      \param from as pair<int, int>.
      \param to as pair<int, int>.
    */
    bool makeMove(std::pair<int, int> from, std::pair<int, int> to);

    //! Gets move generated by AI.
    /*!
      AI will perform a move based on current game.
      \param from as pair<int, int>.
      \param to as pair<int, int>.
    */
    std::shared_ptr<Move> getAIMove();
    Color getTurn();
    ChessBoard* getChessBoard() const;
    Game* getGame();

    //! Move Replay Forward by one move
    /*!
      During replay game, make move forward.
    */
    std::shared_ptr<Move> makeMoveForward();

    //! Move Replay Backward by one move
    /*!
      During replay game, make move backward.
    */
    std::shared_ptr<Move> makeMoveBackward();

    //! Get Saved Games
    /*!
      Iterates through folder where replays are saved and returns those games.
      \return List of saved games mapped as name => path
    */
    std::list<std::map<std::string, std::string>> getSavedGames();
    GameType getGameType();
private:
    void setGame(std::unique_ptr<Game> game);
    void setReplayGame(std::unique_ptr<ReplayGame> replayGame);
    void readGameFromFile(std::string gameFilePath, std::list<std::string>& list);
};

#endif // ENGINE_H
